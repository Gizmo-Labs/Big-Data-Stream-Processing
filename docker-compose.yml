version: '3.8'

services:
# Starte Container mit Kafka
  broker:
    image: confluentinc/cp-kafka:7.6.0
    hostname: broker
    container_name: Kafka-Broker
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'     
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

# Starte Container mit Schema-Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      
# Starte Container mit Mockup Datengenerator      
  connect:
    image: cnfldemos/cp-server-connect-datagen:0.6.2-7.5.0
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.6.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
      
# Starte Container mit Confluent Control Center
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.6.0
    hostname: control-center
    container_name: Kafka-Control-Center
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

# Starte Container mit KSQL Server
  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.6.0
    hostname: ksqldb-server
    container_name: KSQL-Database-Server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

# Starte Container mit KSQL CLI
  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.6.0
    container_name: KSQL-CLI
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    
# Starte Container mit KSQL Mockup Datengenerator    
  ksql-datagen:
    image: confluentinc/ksqldb-examples:7.6.0
    hostname: ksql-datagen
    container_name: KSQL-Datagen
    depends_on:
      - ksqldb-server
      - broker
      - schema-registry
      - connect
    command: "bash -c 'echo Warte bis Kafka bereit ist... && \
                       cub kafka-ready -b broker:29092 1 40 && \
                       echo Warte bis Confluent Schema Registry bereit ist... && \
                       cub sr-ready schema-registry 8081 40 && \
                       echo Warte ein paar Sekunden bis Topic generiert ist... && \
                       sleep 11 && \
                       tail -f /dev/null'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      STREAMS_BOOTSTRAP_SERVERS: broker:29092
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 8081

# Starte Container mit REST API
  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.6.0
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8082:8082"
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
        
# Starte Container mit EMQX Broker + Dashboard
  emqx-enterprise:
    image: emqx/emqx-enterprise:5.5.0
    container_name: EMQX-Enterprise
    ports:      
      - "18083:18083"
      - "1883:1883"          
    volumes:      
      - $PWD/emqx/cluster.hocon:/opt/emqx/data/configs/cluster.hocon
    depends_on:
      - broker
    healthcheck:
      test: [ "CMD", "emqx", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 12

# Starte Container mit MQTTX Simulation      
  mqttx-simulate:
    image: emqx/mqttx-cli:v1.9.3
    container_name: MQTTX-Simulator
    volumes:
      - $PWD/mqttx/rotorblade-facility.js:/app/mqttx-simulate/rotorblade-facility.js
    command:
      - /bin/sh
      - -c
      - |
        mqttx simulate --file /app/mqttx-simulate/rotorblade-facility.js -c 5 -h emqx-enterprise -t RotorWind/Facilities
    depends_on:
      emqx-enterprise:
        condition: service_healthy

# Starte Container mit MQTTX Simulation
  mqttx:
    image: emqx/mqttx-cli:v1.9.3
    container_name: MQTTX-Cli
    command:
      - /bin/sh
      - -c
      - |
        mqttx sub -t 'RotorWindFacilities' -v -h emqx-enterprise
    depends_on:
      emqx-enterprise:
        condition: service_healthy

# Starte Container mit Grafana
  grafana:
    image: grafana/grafana:9.3.2
    container_name: Grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=rotorwind
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=1s
    volumes:      
      - $PWD/grafana-dashboards:/grafana-dashboard-rotorwind-production
      - $PWD/grafana-provisioning/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - $PWD/grafana-provisioning/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
    depends_on:
      emqx-enterprise:
        condition: service_healthy
      influxdb:
        condition: service_started

  influxdb:
    image: influxdb:2.7.1
    container_name: Influxdb
    ports:
      - "8086:8086"
    env_file:
      - influxv2.env

  telegraf:
    image: telegraf:1.27-alpine
    container_name: Telegraf
    depends_on:
      influxdb:
        condition: service_started
    volumes:
      - $PWD/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    env_file:
      - influxv2.env